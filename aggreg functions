#Aggregation Questions

#Find the total amount of poster_qty paper ordered in the orders table.
#Find the total amount of standard_qty paper ordered in the orders table.
#Find the total dollar amount of sales using the total_amt_usd in the orders table.
# Find the total amount spent on standard_amt_usd and gloss_amt_usd paper for each order in the orders table. 
# Find the standard_amt_usd per unit of standard_qty paper. 

SELECT SUM(poster_qty) as poster,
SUM(standard_qty) as standard,
SUM(total_amt_usd) as total_amount,
SUM(standard_amt_usd +gloss_amt_usd) as total_std_gloss,  
SUM(standard_amt_usd) / SUM(standard_qty) as unit_standard_price
FROM orders

#When was the earliest order ever placed? You only need to return the date.
# When did the most recent (latest) web_event occur?
SELECT MIN(occurred_at), MAX(occurred_at)
FROM orders

#Try performing the same query as in question above without using an aggregation function. 
SELECT occurred_at
FROM orders
ORDER BY occurred_at DESC
LIMIT 1

# Find the mean (AVERAGE) amount spent per order on each paper type, as well as the mean amount of each paper type purchased per order. 
SELECT AVG(standard_qty) as standard_mean, 
AVG(gloss_qty) as gloss_mean,
AVG(poster_qty) as poster_mean,
AVG(standard_amt_usd) as standard_amt_mean,
AVG(gloss_amt_usd) as gloss_amt_mean,
AVG(poster_amt_usd) as poster_amt_mean
FROM orders


#  what is the MEDIAN total_usd spent on all orders? 
SELECT
FROM (SELECT total_amt_usd
      FROM orders
      ORDER BY total_amt_usd
      LIMIT 3457) AS Table1
ORDER BY total_amt_usd DESC
LIMIT 2;


# Which account (by name) placed the earliest order? Your solution should have the account name and the date of the order.
SELECT a.name, o.occurred_at
FROM accounts a
JOIN orders o
ON a.id = o.account_id
ORDER BY o.occurred_at
LIMIT 1


# Find the total sales in usd for each account. You should include two columns - the total sales for each company's orders 
# in usd and the company name.

SELECT SUM(o.total_amt_usd) AS total_sales, a.name AS nome
FROM accounts a
JOIN orders o
ON a.id = o.account_id
GROUP BY nome
ORDER BY nome


# Via what channel did the most recent (latest) web_event occur, which account was associated with this web_event? 
# Your query should return only three values - the date, channel, and account name.

SELECT w.occurred_at AS data, w.channel AS canal, a.name AS nome
FROM accounts a
JOIN web_events w
ON a.id = w.account_id
ORDER BY data DESC
LIMIT 1

# Find the total number of times each type of channel from the web_events was used. 
# Your final table should have two columns - the channel and the number of times the channel was used.
SELECT channel, COUNT(channel) 
FROM web_events
GROUP BY channel

# Who was the primary contact associated with the earliest web_event? 
SELECT w.occurred_at AS data, a.primary_poc AS nome
FROM accounts a
JOIN web_events w
ON a.id = w.account_id
ORDER BY data
LIMIT 1

# What was the smallest order placed by each account in terms of total usd. 
SELECT  a.name AS nome, MIN(o.total_amt_usd) AS ordem_total
FROM accounts a
JOIN orders o
ON a.id = o.account_id
GROUP BY nome
ORDER BY ordem_total asc


# Find the number of sales reps in each region. Your final table should have two columns - the region and the number of sales_reps. 
# Order from fewest reps to most reps.
SELECT  r.name as regiao, COUNT (s.name) AS vendedor
FROM sales_reps s
JOIN region r
ON r.id = s.region_id
GROUP BY regiao
ORDER BY vendedor asc


# For each account, determine the average amount of each type of paper they purchased across their orders. 
SELECT  a.name AS nome, AVG(o.standard_qty) AS media_std, AVG(o.gloss_qty) AS media_gloss, AVG(o.poster_qty) AS media_poster
FROM accounts a
JOIN orders o
ON a.id = o.account_id
GROUP BY nome

# For each account, determine the average amount spent per order on each paper type. 
SELECT a.name AS nome, AVG(o.standard_amt_usd) AS media_std, AVG(o.gloss_amt_usd) AS media_gloss, AVG(o.poster_amt_usd) AS media_poster
FROM accounts a
JOIN orders o
ON a.id = o.account_id
GROUP BY nome


# Determine the number of times a particular channel was used in the web_events table for each sales rep. 

SELECT s.name AS vendedor, w.channel AS canal, COUNT(w.channel) AS numero_ocorrencias
FROM accounts a 
JOIN web_events w
ON a.id = w.account_id
JOIN sales_reps s
ON a.sales_rep_id = s.id
GROUP BY vendedor, canal
ORDER BY vendedor, canal


# Determine the number of times a particular channel was used in the web_events table for each region.

SELECT r.name AS regiao, w.channel AS canal, COUNT(w.channel) AS numero_ocorrencias
FROM accounts a 
JOIN web_events w
ON a.id = w.account_id
JOIN sales_reps s
ON a.sales_rep_id = s.id
JOIN region r
ON r.id = s.region_id
GROUP BY regiao, canal
ORDER BY regiao, canal


#DISTINCT
# Using distinct (and without) to check if any account operate in more than 1 region
SELECT DISTINCT r.name AS regiao, a.name AS conta
FROM region r
JOIN sales_reps s
ON r.id = s.region_id
JOIN accounts a
ON s.id = a.sales_rep_id
ORDER BY conta

# Counting how many accounts each sales_rep work on
SELECT s.id, s.name, COUNT(*) num_accounts
FROM accounts a
JOIN sales_reps s
ON s.id = a.sales_rep_id
GROUP BY s.id, s.name
ORDER BY num_accounts;

# show number of sales reps 
SELECT DISTINCT id, name
FROM sales_reps;

# HAVING
# How many of the sales reps have more than 5 accounts that they manage?
SELECT s.id, s.name, COUNT(*) AS num_accounts
FROM accounts a
JOIN sales_reps s
ON s.id = a.sales_rep_id
GROUP BY s.id, s.name
HAVING COUNT(*) > 5
ORDER BY num_accounts;


# How many accounts have more than 20 orders?
SELECT a.name AS conta, COUNT(*) AS sum_orders
FROM accounts a
JOIN orders o
ON a.id = o.account_id
GROUP BY conta
HAVING COUNT(*) > 20

#Which account has the most orders?
SELECT a.name AS conta, COUNT(*) AS sum_orders
FROM accounts a
JOIN orders o
ON a.id = o.account_id
GROUP BY conta
ORDER BY sum_orders DESC
LIMIT 1

# or querring from another query
SELECT MAX (sum_orders) FROM 
	(SELECT a.name AS conta, COUNT(*) AS sum_orders
	FROM accounts a
	JOIN orders o
	ON a.id = o.account_id
	GROUP BY conta ) AS table1

# How many accounts spent more than 30,000 usd total across all orders?
SELECT a.name AS conta, SUM (total_amt_usd) AS soma
FROM accounts a
JOIN orders o
ON a.id = o.account_id
GROUP BY conta
HAVING SUM (total_amt_usd) > 30000

# How many accounts spent less than 1,000 usd total across all orders?
SELECT a.name AS conta, SUM (total_amt_usd) AS soma
FROM accounts a
JOIN orders o
ON a.id = o.account_id
GROUP BY conta
HAVING SUM (total_amt_usd) < 1000

# Which account has spent the most with us?
SELECT a.name AS conta, SUM (total_amt_usd) AS soma
FROM accounts a
JOIN orders o
ON a.id = o.account_id
GROUP BY conta 
ORDER BY soma DESC
LIMIT 1


Which account has spent the least with us?
SELECT a.name AS conta, SUM (total_amt_usd) AS soma
FROM accounts a
JOIN orders o
ON a.id = o.account_id
GROUP BY conta 
ORDER BY soma ASC
LIMIT 1

# Which accounts used facebook as a channel to contact customers more than 6 times?

SELECT a.name AS conta, w.channel as canal, COUNT (*) AS numero
FROM accounts a
JOIN web_events w
ON a.id = w.account_id
GROUP BY conta, canal
HAVING w.channel = 'facebook' AND COUNT (*) > 6


# Which account used facebook most as a channel? 
SELECT  a.name AS conta, w.channel as canal, COUNT (*) AS numero
FROM accounts a
JOIN web_events w
ON a.id = w.account_id
GROUP BY conta, canal
HAVING w.channel = 'facebook' 
ORDER BY numero DESC

# Which channel was most frequently used by most accounts?
SELECT  a.name AS conta, w.channel as canal, COUNT (*) AS numero
FROM accounts a
JOIN web_events w
ON a.id = w.account_id
GROUP BY conta, canal
ORDER BY numero DESC


## DATE
# sum total amount per day
SELECT DATE_TRUNC('day', occurred_at) AS dia, SUM(total_amt_usd) AS qtde
FROM orders
GROUP BY 1

# Find the sales in terms of total dollars for all orders in each year, ordered from greatest to least. 

SELECT DATE_PART('year', occurred_at) AS ano, SUM(total_amt_usd) AS qtde
FROM orders
GROUP BY 1
ORDER BY 2 DESC


# Which month did Parch & Posey have the greatest sales in terms of total dollars? Are all months evenly represented by the dataset?
SELECT DATE_PART('month', occurred_at) AS mes, SUM(total_amt_usd) AS qtde
FROM orders
GROUP BY 1
ORDER BY 2 DESC


# Which year did Parch & Posey have the greatest sales in terms of total number of orders? 
# Are all years evenly represented by the dataset?

SELECT DATE_PART('year', occurred_at) AS ano, SUM(total) AS qtde
FROM orders
GROUP BY 1
ORDER BY 2 DESC

# Removing 2013 and 2017 which only have 1 month of data:
SELECT DATE_PART('month', occurred_at) ord_month, SUM(total_amt_usd) total_spent
FROM orders
WHERE occurred_at BETWEEN '2014-01-01' AND '2017-01-01'
GROUP BY 1
ORDER BY 2 DESC; 


# Which month did Parch & Posey have the greatest sales in terms of total number of orders? 
# Are all months evenly represented by the dataset?

SELECT DATE_PART('month', occurred_at) AS mes, SUM(total) AS qtde
FROM orders
GROUP BY 1
ORDER BY 2 DESC


# In which month of which year did Walmart spend the most on gloss paper in terms of dollars?
SELECT DATE_TRUNC('month', o.occurred_at) ord_date, SUM(o.gloss_amt_usd) tot_spent
FROM orders o 
JOIN accounts a
ON a.id = o.account_id
WHERE a.name = 'Walmart'
GROUP BY 1
ORDER BY 2 DESC
LIMIT 1;

# Selecting the month / year with the biggest ammount of gloss paper spent
SELECT DATE_PART('year', occurred_at) AS ano, DATE_PART('month', occurred_at) AS mes, SUM(gloss_amt_usd) AS qtde
FROM orders
GROUP BY 1, 2
ORDER BY 3 DESC


#We would like to understand 3 different levels of customers based on the amount associated with their purchases. 
#The top branch includes anyone with a Lifetime Value (total sales of all orders) greater than 200,000 usd. 
#The second branch is between 200,000 and 100,000 usd. The lowest branch is anyone under 100,000 usd. 
#Provide a table that includes the level associated with each account. 
#You should provide the account name, the total sales of all orders for the customer, and the level. 
#Order with the top spending customers listed first.

SELECT a.name AS conta, SUM(o.total_amt_usd) AS total_amt, CASE 
	WHEN SUM(o.total_amt_usd) > 200000 THEN 'level1' 
	WHEN SUM(o.total_amt_usd) < 200000 AND SUM(o.total_amt_usd) > 100000 THEN 'level2' 
	WHEN SUM(o.total_amt_usd) < 100000 THEN 'level3' END AS level 
FROM orders o
JOIN accounts a
ON o.account_id = a.id
GROUP BY 1
ORDER BY 2 DESC


# We would now like to perform a similar calculation to the first, but we want to obtain the total amount spent by customers only in 
# 2016 and 2017. Keep the same levels as in the previous question. Order with the top spending customers listed first.

SELECT a.name AS conta, SUM(o.total_amt_usd) AS total_amt, CASE 
	WHEN SUM(o.total_amt_usd) > 200000 THEN 'level1' 
	WHEN SUM(o.total_amt_usd) < 200000 AND SUM(o.total_amt_usd) > 100000 THEN 'level2' 
	WHEN SUM(o.total_amt_usd) < 100000 THEN 'level3'
    END AS level 
FROM orders o
JOIN accounts a
ON o.account_id = a.id
WHERE o.occurred_at BETWEEN '2016-01-01' AND '2017-12-30'
GROUP BY 1
ORDER BY 2 DESC


#We would like to identify top performing sales reps, which are sales reps associated with more than 200 orders. 
#Create a table with the sales rep name, the total number of orders, and a column with top or not depending on if they have more 
#than 200 orders. Place the top sales people first in your final table.


The previous didn't account for the middle, nor the dollar amount associated with the sales. Management decides they want to see 
these characteristics represented as well. We would like to identify top performing sales reps, which are sales reps associated 
with more than 200 orders or more than 750000 in total sales. The middle group has any rep with more than 150 orders or 500000 in sales.
Create a table with the sales rep name, the total number of orders, total sales across all orders, and a column with top, middle, 
or low depending on this criteria. Place the top sales people based on dollar amount of sales first in your final table. 
You might see a few upset sales people by this criteria!
