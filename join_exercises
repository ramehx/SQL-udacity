
##Try pulling standard_qty, gloss_qty, and poster_qty from the orders table, and the website and the primary_poc from the accounts table.
SELECT orders.id, orders.standard_qty, orders.gloss_qty, orders.poster_qty, accounts.website, accounts.primary_poc
FROM orders
JOIN accounts 
ON orders.account_id = accounts.id

## Provide a table for all the for all web_events associated with account name of Walmart. There should be three columns. 
## Be sure to include the primary_poc, time of the event, and the channel for each event. 
## Additionally, you might choose to add a fourth column to assure only Walmart events were chosen. 
SELECT ac.primary_poc,  web.occurred_at, web.channel, ac.name 
FROM accounts ac
JOIN web_events web
ON web.account_id = ac.id
WHERE ac.name = 'Walmart'

## Provide a table that provides the region for each sales_rep along with their associated accounts. 
## Your final table should include three columns: the region name, the sales rep name, and the account name. 
## Sort the accounts alphabetically (A-Z) according to account name.
SELECT reg.name region, sal.name representante, ac.name conta      
FROM sales_reps sal                                      
JOIN region reg                                          
ON sal.region_id = reg.id                                
JOIN accounts ac                                         
ON ac.sales_rep_id = sal.id                              
ORDER BY ac.name                                         

## Provide the name for each region for every order, as well as the account name and the unit price they paid (total_amt_usd/total) 
## for the order. Your final table should have 3 columns: region name, account name, and unit price. 
## A few accounts have 0 for total, so I divided by (total + 0.01) to assure not dividing by zero.
SELECT reg.name regiao, ac.name conta, 
(o.total_amt_usd / (o.total + 0.01)) unit_price
FROM orders o
JOIN accounts ac
ON o.account_id = ac.id
JOIN sales_reps sal
ON ac.sales_rep_id = sal.id
JOIN region reg
ON reg.id = sal.region_id


# Provide a table that provides the region for each sales_rep along with their associated accounts. 
# This time only for the Midwest region. Your final table should include three columns: the region name, the sales rep name, 
# and the account name. Sort the accounts alphabetically (A-Z) according to account name.

SELECT r.name regiao, s.name representante, a.name conta
FROM accounts a
JOIN sales_reps s 
ON a.sales_rep_id = s.id
JOIN region r
ON s.region_id = r.id
WHERE regiao = 'Midwest'
ORDER BY conta asc



# This time only for accounts where the sales rep has a first name starting with S and in the Midwest region. 
 
SELECT r.name regiao, s.name representante, a.name conta
FROM accounts a
JOIN sales_reps s 
ON a.sales_rep_id = s.id
JOIN region r
ON s.region_id = r.id
WHERE representante LIKE 'S%' AND regiao = 'Midwest'
ORDER BY conta asc


# This time only for accounts where the sales rep has a last name starting with K and in the Midwest region. 

SELECT r.name regiao, s.name representante, a.name conta
FROM accounts a
JOIN sales_reps s 
ON a.sales_rep_id = s.id
JOIN region r
ON s.region_id = r.id
WHERE representante LIKE '%K%' AND regiao = 'Midwest'
ORDER BY conta asc

# Provide the name for each region for every order, as well as the account name and the unit price they paid (total_amt_usd/total) 
# for the order. However, you should only provide the results if the standard order quantity exceeds 100. Your final table should have 
# 3 columns: region name, account name, and unit price. 
# In order to avoid a division by zero error, adding .01 to the denominator here is helpful total_amt_usd/(total+0.01). 

SELECT r.name regiao, a.name conta, (o.total_amt_usd / (o.total + 0.01)) unit_price, o.standard_qty
FROM orders o
JOIN accounts a 
ON o.account_id = a.id
JOIN sales_reps s 
ON a.sales_rep_id = s.id
JOIN region r
ON s.region_id = r.id 
WHERE o.standard_qty > 100

# Provide the results if the standard order quantity exceeds 100 and the poster order quantity exceeds 50. 

SELECT r.name regiao, a.name conta, (o.total_amt_usd / (o.total + 0.01)) unit_price, o.standard_qty, o.poster_qty
FROM region r
JOIN sales_reps s 
ON s.region_id = r.id
JOIN accounts a 
ON a.sales_rep_id = s.id
JOIN orders o
ON o.account_id = a.id
WHERE o.standard_qty >100 AND poster_qty > 50
ORDER BY unit_price asc


# Provide the results if the standard order quantity exceeds 100 and the poster order quantity exceeds 50. 
# Sort for the largest unit price first.

SELECT r.name regiao, a.name conta, (o.total_amt_usd / (o.total + 0.01)) unit_price, o.standard_qty, o.poster_qty
FROM region r
JOIN sales_reps s 
ON s.region_id = r.id
JOIN accounts a 
ON a.sales_rep_id = s.id
JOIN orders o
ON o.account_id = a.id
WHERE o.standard_qty >100 AND poster_qty > 50
ORDER BY unit_price desc


# What are the different channels used by account id 1001? Your final table should have only 2 columns: account name and the different 
# channels. You can try SELECT DISTINCT to narrow down the results to only the unique values.

SELECT DISTINCT a.name conta, w.channel canal
FROM web_events w
JOIN accounts a
ON w.account_id = a.id
WHERE a.id = 1001

#Find all the orders that occurred in 2015. Your final table should have 4 columns: occurred_at, account name, order total, and order 
#total_amt_usd.

SELECT o.occurred_at, a.name, o.total, o.total_amt_usd
FROM accounts a
JOIN orders o
ON o.account_id = a.id
WHERE o.occurred_at BETWEEN '01-01-2015' AND '01-01-2016'
ORDER BY o.occurred_at DESC;

